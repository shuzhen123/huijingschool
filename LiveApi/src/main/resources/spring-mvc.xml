<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 注解探测器 -->
	<context:annotation-config />
	<!-- 自动扫描注解 -->
	<context:component-scan base-package="dianfan.controller">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 添加注解驱动 -->
	<!-- 处理responseBody 里面日期、null转换“”类型 -->
	<mvc:annotation-driven>
		<mvc:message-converters >
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<property name="objectMapper">
						<bean class="dianfan.util.CustomObjectMapper"></bean>
					</property>
				</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- cors 跨域请求 -->
	<mvc:cors>
		<mvc:mapping path="/**" />
	</mvc:cors>

	<!-- 多视图 -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
		</property>
	</bean>
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager">
			<bean
				class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
				<property name="mediaTypes">
					<map>
						<entry key="json" value="application/json"></entry>
						<entry key="xml" value="application/xml"></entry>
					</map>
				</property>
			</bean>
		</property>

		<!-- <property name="defaultViews"> <list> <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"></bean> 
			<bean class="org.springframework.web.servlet.view.xml.MarshallingView"> <constructor-arg> 
			<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> <property name="classesToBeBound"> 
			<list> <value>dianfan.util.wx.WeixinResult</value> <value>dianfan.util.wx.WeixinOrderData</value> 
			</list> </property> </bean> </constructor-arg> </bean> </list> </property> -->
	</bean>



	<!-- 访问静态资源 -->
	<mvc:resources location="/" mapping="/**" />
	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<mvc:interceptors>
		<!-- 自定义拦截器 -->
		<mvc:interceptor>
			<!-- /**表示所有url包括子url路径， 日志拦截器 -->
			<mvc:mapping path="/**" />
			<bean class="dianfan.interceptor.LogInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- /**表示所有url包括子url路径， 状态拦截器 -->
			<mvc:mapping path="/**" />
			<bean class="dianfan.interceptor.ApiAuthInterceptor">
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 自定义异常处理，SimpleMappingExceptionResolver这个类可以是个空类，但是要写，方便在java代码里面使用 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="dianfan.exception.SessionTimeoutException">timeout</prop>
				<!-- <prop key="dianfan.exception.SessionTimeoutException">redirect:/admin.do</prop> -->
			</props>
		</property>
	</bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
	</bean>

	<!-- 全局异常处理 -->
	<bean class="dianfan.exception.GlobalExceptionResolver"></bean>

	<!-- 将 springSwaggerConfig加载到spring容器 -->
	<bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig" />

	<!-- 将自定义的swagger配置类加载到spring容器 -->
	<bean class="dianfan.plugin.SwaggerConfig" />

</beans>